#!/command/with-contenv bashio
# ==============================================================================
# Home Assistant Community Add-on: Mattermost
# an open source platform for secure collaboration across the entire software development lifecycle 
# ==============================================================================
bashio::log.notice "Preparing Configuration..."

# Define default args
APP_DIR="/opt/mattermost"
TMP_FILE="/tmp/config.json.tmp"
DEFAULT_DB_DRIVER="postgres"
DEFAULT_LOG_LEVEL="info"
EXAMPLE_SITE_URL="https://mattermost.example.com"

# Retrieve configuration values
LICENSE_FILE=$(bashio::config 'license_file')
SITE_NAME=$(bashio::config 'site_name')
SITE_DESCRIPTION=$(bashio::config 'site_description')
SITE_URL=$(bashio::config 'site_url')
DB_DRIVER=$(bashio::config 'db_driver')
DB_HOST=$(bashio::config 'db_host')
DB_PORT=$(bashio::config 'db_port')
DB_DATABASE=$(bashio::config 'db_database')
DB_USER=$(bashio::config 'db_user')
DB_PASSWORD=$(bashio::config 'db_password')
DB_PARAMETERS_SSLMODE=$(bashio::config 'db_parameters_sslmode')
DB_PARAMETERS_CONNECTION_TIMEOUT=$(bashio::config 'db_parameters_connection_timeout')
PLUGIN_ENABLE_UPLOAD=$(bashio::config 'plugin_enable_upload')
PERFORMANCE_MONITORING_ENABLED=$(bashio::config 'performance_monitoring_enabled')
SSL=$(bashio::config 'ssl')
CERTFILE=$(bashio::config 'certfile')
KEYFILE=$(bashio::config 'keyfile')
LOG_LEVEL=$(bashio::config 'log_level')
bashio::log.debug "SITE_NAME='$SITE_NAME'"
bashio::log.info "SITE_URL=$SITE_URL"
bashio::log.info "LICENSE_FILE=$LICENSE_FILE"
bashio::log.info "DB_DRIVER=$DB_DRIVER"
bashio::log.info "DB_HOST=$DB_HOST"
bashio::log.info "DB_PORT=$DB_PORT"
bashio::log.info "DB_DATABASE=$DB_DATABASE"
bashio::log.info "DB_USER=$DB_USER"
bashio::log.info "DB_PASSWORD=$DB_PASSWORD"
bashio::log.info "DB_PARAMETERS_SSLMODE=$DB_PARAMETERS_SSLMODE"
bashio::log.info "DB_PARAMETERS_CONNECTION_TIMEOUT=$DB_PARAMETERS_CONNECTION_TIMEOUT"
bashio::log.info "PLUGIN_ENABLE_UPLOAD=$PLUGIN_ENABLE_UPLOAD"
bashio::log.info "PERFORMANCE_MONITORING_ENABLED=$PERFORMANCE_MONITORING_ENABLED"
bashio::log.info "SSL=$SSL"
bashio::log.info "CERTFILE=$CERTFILE"
bashio::log.info "KEYFILE=$KEYFILE"
bashio::log.info "LOG_LEVEL=$LOG_LEVEL"

# Ensure /config and its subdirectories exist
mkdir -p /config
mkdir -p /config/data

# Set permissions for the /config directory
chown -R mattermost:mattermost /config
chown -R mattermost:mattermost /opt/mattermost
chmod -R 750 /config
chmod -R 750 /opt/mattermost

# Check if the configuration is old-style
if [ ! -f "/config/config/config.json" ]; then
    bashio::log.notice "Old-style configuration detected. Migrating to new-style..."

    # Move config/* to config/data/
    if [ -d "/config/data" ]; then
        bashio::log.error "There is already /config/data directory. Cannot migrate."
    else
        mkdir -p /config/data
        mv /config/* /config/data
        bashio::log.notice "Migrated config/* to config/data/."
    fi
else
fi

# Symlink /config/data to /opt/mattermost/data
if [ ! -L "/opt/mattermost/data" ]; then
    if [ -d "/opt/mattermost/data" ]; then
        echo "Warning: /opt/mattermost/data already exists as a directory. It should be empty."
    else
        ln -s /config/data /opt/mattermost/data
        echo "Symlinked /config/data to /opt/mattermost/data"
    fi
else
    echo "/opt/mattermost/data symlink already exists."
fi

# Handle /opt/mattermost/config
if [ -d "/config/config" ]; then
    bashio::log.notice "Existing configuration detected in /config/config. Using this configuration..."
    if [ -e "/opt/mattermost/config" ]; then
        rm -rf /opt/mattermost/config
    fi
    ln -s /config/config /opt/mattermost/config
    bashio::log.info "Successfully symlinked /config/config to /opt/mattermost/config"
else
    if [ -d "/opt/mattermost/config" ]; then
        ln -s /opt/mattermost/config /config/config
        bashio::log.info "No existing configuration found in /config/config. Symlinked /opt/mattermost/config to /config/config"
    else
        bashio::log.error "Error: /opt/mattermost/config does not exist. Cannot create symlink."
    fi
fi

# Inform about the completion of the check
bashio::log.debug "Symbolic link check completed."



# ServiceSettings.LicenseFileLocation
if bashio::config.has_value "license_file"; then
    LICENSE_FILE=$(bashio::config 'license_file')
    bashio::log.info "Using given license file: '$LICENSE_FILE'"
    if [ -f "$APP_DIR/config/config.json" ]; then
        LICENSE_FILE_LOCATION="/opt/mattermost/data/$LICENSE_FILE"
        bashio::log.debug "Found config.json, proceeding with ServiceSettings.LicenseFileLocation fix"
        jq --arg license_file_location "$LICENSE_FILE_LOCATION" '.ServiceSettings.LicenseFileLocation = $license_file_location' "$APP_DIR/config/config.json" > "$TMP_FILE" && \
        mv "$TMP_FILE" "$APP_DIR/config/config.json" && \
        bashio::log.info "ServiceSettings.LicenseFileLocation set to addon_config/$LICENSE_FILE" || \
        bashio::log.error "Failed to update ServiceSettings.LicenseFileLocation in config.json"
    else
        bashio::log.error "config.json not found in $APP_DIR/config"
    fi
else
    bashio::log.notice "License File not specified. Preceed with Free license..."
fi



# TeamSettings.SiteName
if bashio::config.has_value "site_name"; then
    SITE_NAME=$(bashio::config 'site_name')
    bashio::log.info "Using given site name: '$SITE_NAME'"

    if [ -f "$APP_DIR/config/config.json" ]; then
        bashio::log.debug "Found config.json, proceeding with TeamSettings.SiteName fix"
        jq --arg site_name "$SITE_NAME" '.TeamSettings.SiteName = $site_name' "$APP_DIR/config/config.json" > "$TMP_FILE" && \
        mv "$TMP_FILE" "$APP_DIR/config/config.json" && \
        bashio::log.debug "TeamSettings.SiteName set to $SITE_NAME" || \
        bashio::log.error "Failed to update TeamSettings.SiteName in config.json"
    else
        bashio::log.error "config.json not found in $APP_DIR/config"
    fi
else
    bashio::log.notice "Site Name not specified. Preceed with default "Mattermost"..."
fi



# TeamSettings.SiteDescription
if bashio::config.has_value "site_description"; then
    SITE_DESCRIPTION=$(bashio::config 'site_description')
    bashio::log.info "Using given site description"
    bashio::log.info "$SITE_DESCRIPTION"

    if [ -f "$APP_DIR/config/config.json" ]; then
        bashio::log.debug "Found config.json, proceeding with TeamSettings.SiteDescription fix"
        jq --arg site_description "$SITE_DESCRIPTION" '.TeamSettings.SiteDescription = $site_description' "$APP_DIR/config/config.json" > "$TMP_FILE" && \
        mv "$TMP_FILE" "$APP_DIR/config/config.json" && \
        bashio::log.debug "TeamSettings.SiteDescription set to provided text" || \
        bashio::log.error "Failed to update TeamSettings.SiteDescription in config.json"
    else
        bashio::log.error "config.json not found in $APP_DIR/config"
    fi
else
    bashio::log.notice "Site Description not specified. Proceed with default "Log in"."
fi

# ServiceSettings.SiteURL
if bashio::config.has_value "site_url"; then
    SITE_URL=$(bashio::config 'site_url')
    bashio::log.info "Using given site url: '$SITE_URL'"
else
    SITE_URL=$EXAMPLE_SITE_URL
    bashio::log.notice "SiteURL not specified, using example site url: '$EXAMPLE_SITE_URL'..."
fi

if [ -f "$APP_DIR/config/config.json" ]; then
    bashio::log.debug "Found config.json, proceeding with ServiceSettings.SiteURL fix"
    jq --arg site_url "$SITE_URL" '.ServiceSettings.SiteURL = $site_url' "$APP_DIR/config/config.json" > "$TMP_FILE" && \
    mv "$TMP_FILE" "$APP_DIR/config/config.json" && \
    bashio::log.info "ServiceSettings.SiteURL set to $SITE_URL" || \
    bashio::log.error "Failed to update ServiceSettings.SiteURL in config.json"
else
    bashio::log.error "config.json not found in $APP_DIR/config"
fi



# PluginSettings.EnableUploads
if bashio::config.has_value "plugin_enable_upload"; then
    PLUGIN_ENABLE_UPLOAD=$(bashio::config 'plugin_enable_upload')
    bashio::log.info "Using given plugin_enable_upload: '$PLUGIN_ENABLE_UPLOAD'"
    if [ -f "$APP_DIR/config/config.json" ]; then
        bashio::log.debug "Found config.json, proceeding with PluginSettings.EnableUploads fix"
        jq --argjson enable_uploads "$PLUGIN_ENABLE_UPLOAD" '.PluginSettings.EnableUploads = $enable_uploads' "$APP_DIR/config/config.json" > "$TMP_FILE" && \
        mv "$TMP_FILE" "$APP_DIR/config/config.json" && \
        bashio::log.info "PluginSettings.EnableUploads set to $PLUGIN_ENABLE_UPLOAD" || \
        bashio::log.error "Failed to update PluginSettings.EnableUploads in config.json"
    else
        bashio::log.error "config.json not found in $APP_DIR/config"
    fi
else
    PLUGIN_ENABLE_UPLOAD=false
    bashio::log.notice "PluginSettings.EnableUploads not specified, using PluginSettings.EnableUploads: false..."
fi



# Ingress
if [ -f "$APP_DIR/config/config.json" ]; then
    # ServiceSettings.AllowedUntrustedInternalConnections
    bashio::log.debug "Found config.json, proceeding with ServiceSettings.AllowedUntrustedInternalConnections fix"
    jq '.ServiceSettings.AllowedUntrustedInternalConnections = "172.30.32.0/23"' "$APP_DIR/config/config.json" > "$TMP_FILE" && \
    mv "$TMP_FILE" "$APP_DIR/config/config.json" && \
    bashio::log.info "ServiceSettings.AllowedUntrustedInternalConnections set to 172.30.32.0/23" || \
    bashio::log.error "Failed to update ServiceSettings.AllowedUntrustedInternalConnections in config.json"

    # ServiceSettings.TrustedProxyIPHeader
    bashio::log.debug "Found config.json, proceeding with ServiceSettings.TrustedProxyIPHeader fix"
    jq '.ServiceSettings.TrustedProxyIPHeader = ["X-Forwarded-For", "X-Real-Ip", "X-Ingress-Path"]' "$APP_DIR/config/config.json" > "$TMP_FILE" && \
    mv "$TMP_FILE" "$APP_DIR/config/config.json" && \
    bashio::log.info "ServiceSettings.TrustedProxyIPHeader set to [\"X-Forwarded-For\", \"X-Real-Ip\", \"X-Ingress-Path\"]" || \
    bashio::log.error "Failed to update ServiceSettings.TrustedProxyIPHeader in config.json"

    export GRADIO_ROOT_PATH=$(bashio::addon.ingress_entry)
    bashio::log.info "Serving app from $GRADIO_ROOT_PATH"
else
    bashio::log.error "config.json not found in $APP_DIR/config"
fi


# DB DRIVER
if bashio::config.has_value "db_driver"; then
    DB_DRIVER=$(bashio::config 'db_driver')
    bashio::log.info "Using chosen database driver: '$DB_DRIVER'"
else
    DB_DRIVER=$DEFAULT_DB_DRIVER
    bashio::log.notice "Using default database driver: '$DEFAULT_DB_DRIVER'..."
fi

if [ -f "$APP_DIR/config/config.json" ]; then
    bashio::log.debug "Found config.json, proceeding with SqlSettings.DriverName fix"
    jq --arg db_driver "$DB_DRIVER" '.SqlSettings.DriverName = $db_driver' "$APP_DIR/config/config.json" > "$TMP_FILE" && \
    mv "$TMP_FILE" "$APP_DIR/config/config.json" && \
    bashio::log.info "SqlSettings.DriverName set to $DB_DRIVER" || \
    bashio::log.error "Failed to update SqlSettings.DriverName in config.json"
else
    bashio::log.error "config.json not found in $APP_DIR/config"
fi

## Construct DataSource string
# Construct the DataSource string based on the DB_DRIVER
if [ "$DB_DRIVER" = "mysql" ]; then
    # MySQL DataSource format
    # Adjust MySQL SSL mode settings as per requirement
    MYSQL_SSL_SETTINGS=""
    if [ "$DB_PARAMETERS_SSLMODE" = "require" ] || [ "$DB_PARAMETERS_SSLMODE" = "verify-ca" ] || [ "$DB_PARAMETERS_SSLMODE" = "verify-full" ]; then
        MYSQL_SSL_SETTINGS="&sslmode=required"
    elif [ "$DB_PARAMETERS_SSLMODE" = "prefer" ] || [ "$DB_PARAMETERS_SSLMODE" = "allow" ]; then
        MYSQL_SSL_SETTINGS="&sslmode=preferred"
    elif [ "$DB_PARAMETERS_SSLMODE" = "disable" ]; then
        MYSQL_SSL_SETTINGS="&sslmode=disabled"
    fi
    DB_DATASOURCE="mysql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_DATABASE}?charset=utf8mb4,utf8${MYSQL_SSL_SETTINGS}&connect_timeout=${DB_PARAMETERS_CONNECTION_TIMEOUT}"
elif [ "$DB_DRIVER" = "postgres" ]; then
    # PostgreSQL DataSource format
    # Adjust PostgreSQL TLS settings as per requirement
    POSTGRES_TLS_SETTINGS=""
    if [ "$DB_PARAMETERS_SSLMODE" = "require" ]; then
        POSTGRES_TLS_SETTINGS="&sslmode=require&tls=true"
    elif [ "$DB_PARAMETERS_SSLMODE" = "skip-verify" ]; then
        POSTGRES_TLS_SETTINGS="&sslmode=require&tls=skip-verify"
    else
        POSTGRES_TLS_SETTINGS="&sslmode=${DB_PARAMETERS_SSLMODE}"
    fi
    DB_DATASOURCE="postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_DATABASE}?${POSTGRES_TLS_SETTINGS}&connect_timeout=${DB_PARAMETERS_CONNECTION_TIMEOUT}"
else
    bashio::log.error "Unsupported database driver: $DB_DRIVER"
    exit 1
fi

## Update DataSource using jq
jq --arg db_source "$DB_DATASOURCE" '.SqlSettings.DataSource = $db_source' "$APP_DIR/config/config.json" > "$TMP_FILE" && \
mv "$TMP_FILE" "$APP_DIR/config/config.json" && \
bashio::log.info "SqlSettings.DataSource set to $DB_DATASOURCE" || \
bashio::log.error "Failed to update SqlSettings.DataSource in config.json"


# MetricsSettings.Enable
if bashio::config.has_value "performance_monitoring_enabled"; then
    PERFORMANCE_MONITORING_ENABLED=$(bashio::config 'performance_monitoring_enabled')
    bashio::log.info "Using performance monitoring enabled: '$PERFORMANCE_MONITORING_ENABLED'"
    if [ -f "$APP_DIR/config/config.json" ]; then
        bashio::log.debug "Found config.json, proceeding with MetricsSettings.Enable fix"
        jq --arg pm_enabled "$PERFORMANCE_MONITORING_ENABLED" '.MetricsSettings.Enable = ($pm_enabled | test("true"))' "$APP_DIR/config/config.json" > "$TMP_FILE" && \
        mv "$TMP_FILE" "$APP_DIR/config/config.json" && \
        bashio::log.info "MetricsSettings.Enable: $PERFORMANCE_MONITORING_ENABLED" || \
        bashio::log.error "Failed to update MetricsSettings.Enable in config.json"
    else
        bashio::log.error "config.json not found in $APP_DIR/config"
    fi
else
    bashio::log.notice "Using default value MetricsSettings.Enable: false"
fi

# SSL
if [ "$SSL" = true ]; then
    # Update ServiceSettings.ConnectionSecurity to "TLS"
    jq '.ServiceSettings.ConnectionSecurity = "TLS"' "$APP_DIR/config/config.json" > "$TMP_FILE" && \
    mv "$TMP_FILE" "$APP_DIR/config/config.json" && \
    bashio::log.info "ServiceSettings.ConnectionSecurity set to TLS" || \
    bashio::log.error "Failed to update ServiceSettings.ConnectionSecurity in config.json"

    # Update ServiceSettings.TLSCertFile
    jq '.ServiceSettings.TLSCertFile = "/ssl/'"$CERTFILE"'"' "$APP_DIR/config/config.json" > "$TMP_FILE" && \
    mv "$TMP_FILE" "$APP_DIR/config/config.json" && \
    bashio::log.info "ServiceSettings.TLSCertFile set to /ssl/$CERTFILE" || \
    bashio::log.error "Failed to update ServiceSettings.TLSCertFile in config.json"

    # Update ServiceSettings.TLSKeyFile
    jq '.ServiceSettings.TLSKeyFile = "/ssl/'"$KEYFILE"'"' "$APP_DIR/config/config.json" > "$TMP_FILE" && \
    mv "$TMP_FILE" "$APP_DIR/config/config.json" && \
    bashio::log.info "ServiceSettings.TLSKeyFile set to /ssl/$KEYFILE" || \
    bashio::log.error "Failed to update ServiceSettings.TLSKeyFile in config.json"
else
    bashio::log.notice "SSL is not enabled; ServiceSettings.ConnectionSecurity remains disabled"
fi



# Mattermost
bashio::log.notice "Execute Mattermost..."
# su - mattermost -c 'exec /opt/mattermost/bin/mattermost'
cd $APP_DIR
bin/mattermost